//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class InputMatcher {

    static Entitas.IMatcher<InputEntity> _matcherAttackInput;

    public static Entitas.IMatcher<InputEntity> AttackInput {
        get {
            if (_matcherAttackInput == null) {
                var matcher = (Entitas.Matcher<InputEntity>)Entitas.Matcher<InputEntity>.AllOf(InputComponentsLookup.AttackInput);
                matcher.componentNames = InputComponentsLookup.componentNames;
                _matcherAttackInput = matcher;
            }

            return _matcherAttackInput;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputEntity {

    static readonly Code.Gameplay.Input.AttackInput attackInputComponent = new Code.Gameplay.Input.AttackInput();

    public bool isAttackInput {
        get { return HasComponent(InputComponentsLookup.AttackInput); }
        set {
            if (value != isAttackInput) {
                var index = InputComponentsLookup.AttackInput;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : attackInputComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}
