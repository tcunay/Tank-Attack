//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCameraUnity;

    public static Entitas.IMatcher<GameEntity> CameraUnity {
        get {
            if (_matcherCameraUnity == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CameraUnity);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCameraUnity = matcher;
            }

            return _matcherCameraUnity;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Camera.CameraUnity cameraUnity { get { return (Code.Gameplay.Features.Camera.CameraUnity)GetComponent(GameComponentsLookup.CameraUnity); } }
    public UnityEngine.Camera CameraUnity { get { return cameraUnity.Value; } }
    public bool hasCameraUnity { get { return HasComponent(GameComponentsLookup.CameraUnity); } }

    public GameEntity AddCameraUnity(UnityEngine.Camera newValue) {
        var index = GameComponentsLookup.CameraUnity;
        var component = (Code.Gameplay.Features.Camera.CameraUnity)CreateComponent(index, typeof(Code.Gameplay.Features.Camera.CameraUnity));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCameraUnity(UnityEngine.Camera newValue) {
        var index = GameComponentsLookup.CameraUnity;
        var component = (Code.Gameplay.Features.Camera.CameraUnity)CreateComponent(index, typeof(Code.Gameplay.Features.Camera.CameraUnity));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCameraUnity() {
        RemoveComponent(GameComponentsLookup.CameraUnity);
        return this;
    }
}
